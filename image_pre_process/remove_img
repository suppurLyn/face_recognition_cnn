import cv2
import sys
import os
import dlib
import numpy as np


# Get user supplied values
imagePath = r'E:\alignedFaces'
cascPath = r'C:\Users\lyn\Downloads\FaceDetect-master\haarcascade_frontalface_default.xml'
eyePath = r'C:\Users\lyn\Downloads\FaceDetect-master\haarcascade_eye.xml'

def get_dataset(path):
    dataset = []
    classes = os.listdir(path)
    classes.sort()
    nrof_classes = len(classes)
    for i in range(nrof_classes):
        class_name = classes[i]
        facedir = os.path.join(path, class_name)
        if os.path.isdir(facedir):
            images = os.listdir(facedir)
            image_paths = [os.path.join(facedir,img) for img in images]
            dataset.append(ImageClass(class_name, image_paths))
    return dataset


class ImageClass():
    "Stores the paths to images for a given class"

    def __init__(self, name, image_paths):
        self.name = name
        self.image_paths = image_paths

    def __str__(self):
        return self.name + ', ' + str(len(self.image_paths)) + ' images'

    def __len__(self):
        return len(self.image_paths)

# Create the haar cascade
faceCascade = cv2.CascadeClassifier(cascPath)
images = get_dataset(imagePath)


import dlib
detector = dlib.get_frontal_face_detector()

a=0
logfile = r'E:\test\log.txt'
f = open(logfile, 'a')
for cls in images:
    print cls.name
    f = open(logfile, 'a')
    for img in cls.image_paths:
        a +=1
        image = cv2.imread(img)
        dets, scores, idx = detector.run(image, 1, -1.3)
        if len(scores) ==0:
            os.remove(img)
            f.write( 'reason: no faces detected : %s\n' % img)
        elif float(dets[0].area())/(192*192)<float(1)/9 and scores[0]<-0.75:
            os.remove(img)
            f.write( 'reason: bondig box too small  : %s\n' % img)
        elif min([dets[0].left(),dets[0].top(),dets[0].right(),dets[0].bottom()]) < -51 and scores[0]<-0.75:
            os.remove(img)
            f.write( 'reason: shift too much  : %s\n' % img)
    f.close()